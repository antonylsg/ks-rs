use std::collections::HashMap;

pub struct Table {
    inner: HashMap<u8, Vec<f64>>,
}

impl Table {
    pub fn new() -> Table {
        let inner = vec![
            (
                01,
                vec![
                    0.995, 0.929, 0.828, 0.733, 0.669, 0.618, 0.577, 0.543, 0.514, 0.49, 0.468,
                    0.45, 0.433, 0.418, 0.404, 0.392, 0.381, 0.371, 0.363, 0.356, 0.3488, 0.3416,
                    0.3344, 0.3272, 0.32, 0.314, 0.308, 0.302, 0.296, 0.29, 0.286, 0.282, 0.278,
                    0.274, 0.27,
                ],
            ),
            (
                05,
                vec![
                    0.975, 0.842, 0.708, 0.624, 0.565, 0.521, 0.486, 0.457, 0.432, 0.41, 0.391,
                    0.375, 0.361, 0.349, 0.338, 0.328, 0.318, 0.309, 0.301, 0.294, 0.2892, 0.2844,
                    0.2796, 0.2748, 0.27, 0.264, 0.258, 0.252, 0.246, 0.24, 0.238, 0.236, 0.234,
                    0.232, 0.23,
                ],
            ),
            (
                10,
                vec![
                    0.95, 0.776, 0.642, 0.564, 0.51, 0.47, 0.438, 0.411, 0.388, 0.368, 0.352,
                    0.338, 0.325, 0.314, 0.304, 0.295, 0.286, 0.278, 0.272, 0.264, 0.2592, 0.2544,
                    0.2496, 0.2448, 0.24, 0.236, 0.232, 0.228, 0.224, 0.22, 0.218, 0.216, 0.214,
                    0.212, 0.21,
                ],
            ),
            (
                15,
                vec![
                    0.925, 0.726, 0.597, 0.525, 0.474, 0.436, 0.405, 0.381, 0.36, 0.342, 0.326,
                    0.313, 0.302, 0.292, 0.283, 0.274, 0.266, 0.259, 0.252, 0.246, 0.2408, 0.2356,
                    0.2304, 0.2252, 0.22, 0.216, 0.212, 0.208, 0.204, 0.2, 0.198, 0.196, 0.194,
                    0.192, 0.19,
                ],
            ),
            (
                20,
                vec![
                    0.9, 0.684, 0.565, 0.494, 0.446, 0.41, 0.381, 0.358, 0.339, 0.322, 0.307,
                    0.295, 0.284, 0.274, 0.266, 0.258, 0.25, 0.244, 0.237, 0.231, 0.2268, 0.2226,
                    0.2184, 0.2142, 0.21, 0.206, 0.202, 0.198, 0.194, 0.19, 0.188, 0.186, 0.184,
                    0.182, 0.18,
                ],
            ),
        ].into_iter()
            .collect();

        Table { inner }
    }

    pub fn get(&self, (size, alpha): (usize, u8)) -> Option<f64> {
        match alpha {
            01 | 05 | 10 | 15 | 20 => {}
            _ => return None,
        }

        if size > 35 {
            let numerator = match alpha {
                01 => 1.67,
                05 => 1.36,
                10 => 1.22,
                15 => 1.14,
                20 => 1.07,
                _ => unreachable!(),
            };

            let denominator = (size as f64).sqrt();

            return Some(numerator / denominator);
        }

        self.inner
            .get(&alpha)
            .map(|thresholds| thresholds[size - 1])
    }
}
